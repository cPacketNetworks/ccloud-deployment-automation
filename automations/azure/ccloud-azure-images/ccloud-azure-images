#!/usr/bin/env bash
set -e
set -o pipefail

root_command() {
  # shellcheck disable=SC2154
  location="${args['--location']}"
  # Check if location is provided as an argument
  if [[ -z "$location" ]]; then
    # If not, check if there's a default location set
    # shellcheck disable=SC2016
    location="$(az configure --list-defaults --query '[?name==`location`] | [0].value' -o tsv)"
    if [[ -z "$location" ]]; then
      echo "No location provided and no default location set. Exiting."
      echo "Please provide a location using the --location argument."
      echo "Alternatively, to configure the default location: az configure --defaults location=<location>"
      exit 1
    else
      echo "Using default location to create resources: $location"
    fi
  fi

  supplied_resource_group="${args['--resource-group']}"
  # Check if an RG argument is provided and not empty
  if [[ -n "$supplied_resource_group" ]]; then
    # Check if that RG exists, if not, create it
    if [[ "$(az group list --query "[?name=='$supplied_resource_group'] | length(@)")" == 0 ]]; then
      echo "Resource group '$supplied_resource_group' does not exist, creating it ..."
      az group create -n "$supplied_resource_group" -l "$location"
      echo "Created new resource group: $supplied_resource_group."
    else
      echo "Using Resource group: '$supplied_resource_group'"
    fi
    resource_group="$supplied_resource_group"
  else
    echo "Resource group not specified. Exiting."
    exit 1
  fi

  supplied_storage_account="${args['--storage-account']}"
  if [[ -n "$supplied_storage_account" ]]; then
    if [[ "$(az storage account list --query "[?name=='$supplied_storage_account'] | length(@)")" == 0 ]]; then
      echo "Storage account '$supplied_storage_account' does not exist"
      exit 1
    fi
  else
    generated_storage_account="ccloudimages$(create_random_id)"
    az storage account create \
      --resource-group "$resource_group" \
      --name "$generated_storage_account" \
      --location "$location"
  fi

  if [[ -n "$supplied_storage_account" ]]; then
    storage_account="$supplied_storage_account"
  else
    storage_account="$generated_storage_account"
  fi
  echo "Using storage account: $storage_account"

  supplied_container="${args['--container']}"

  if [[ -n "$supplied_container" ]]; then
    container="$supplied_container"
  else
    container="ccloudimages$(create_random_id)"
  fi
  echo "Using container: $container"

  az storage container create \
    --account-name "${storage_account}" \
    --name "$container" \
    --auth-mode login

  echo "Container '$container' created ..."

  echo "Creating images in resource group: ${resource_group} and VHDs in storage account: ${storage_account} container: ${container} ..."
  sas_urls_file="${args['--file']}"

  if [ -f "$sas_urls_file" ]; then
    echo "File '$sas_urls_file' is present, reading from it ..."

    # Using file descriptor 9 to avoid conflicts with STDIN.
    # If anything consumes STDIN, it will not be available for the loop.
    # Read entire file including last line
    while IFS= read -r -u9 line || [ -n "$line" ]; do
      # Ignore empty lines
      if [ -n "$line" ]; then
        url=$(echo "$line" | xargs) # Trim whitespace around URL by piping into xargs
        echo "processing '$url' ..."
        create_image \
          "$url" \
          "$resource_group" \
          "$storage_account" \
          "$(azure_get_user)" \
          "$container" \
          "$location"
      fi
    done 9<"$sas_urls_file"

  else

    echo "No SAS URLs file '$sas_urls_file' is present, reading from STDIN ..."

    # Read everything from STDIN and write it to the file because something in create_image is consuming STDIN.
    while read -r -u0 url; do
      echo "$url" >>"$sas_urls_file"
    done

    while read -r -u9 url; do
      create_image \
        "$url" \
        "$resource_group" \
        "$storage_account" \
        "$(azure_get_user)" \
        "$container" \
        "$location"
    done 9<"$sas_urls_file"

    rm "$sas_urls_file"

  fi

}

version_command() {
  echo "$version"
}

ccloud_azure_images_usage() {
  if [[ -n $long_usage ]]; then
    printf "ccloud-azure-images - Creates Azure images from Shared Access Signature URLs\n"
    echo

  else
    printf "ccloud-azure-images - Creates Azure images from Shared Access Signature URLs\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  ccloud-azure-images [OPTIONS]\n"
  printf "  ccloud-azure-images --help | -h\n"
  printf "  ccloud-azure-images --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--file, -f FILE"
    printf "    File containing the Shared Access Signature (SAS) URLs for the cPacket\n    ccloud appliances. Please provide one URL per line in the file.\n"
    printf "    Default: ccloud-urls.txt\n"
    echo

    printf "  %s\n" "--storage-account, -a STORAGE-ACCOUNT"
    printf "    Storage account to store the containers with the cpacket image blobs. If a\n    storage account is not provided, one will be created in a resource group.\n"
    echo

    printf "  %s\n" "--container, -c CONTAINER"
    printf "    Container to store the cpacket image blobs. If a container is not provided,\n    a uniquely named one will be created.\n"
    echo

    printf "  %s\n" "--resource-group, -g RESOURCE-GROUP (required)"
    printf "    Resource group to place all the resources in. If it doesn't exist, it will\n    be created with the name provided.\n"
    echo

    printf "  %s\n" "--location, -l LOCATION"
    printf "    Azure location to create the resources in. If not provided, the default\n    location will be used.\n    To list available locations:\n      az account list-locations\n    To configure the default location:\n      e.g. az configure --defaults location=eastus2\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# https://arsenvlad.medium.com/creating-vhd-azure-blob-sas-url-from-azure-managed-image-2be0e7c287f4
create_image() {
  local source_url="$1"
  local resource_group="$2"
  local storage_account="$3"
  local created_by="$4"
  local container="$5"
  local location="$6"

  local image_name

  filename=$(get_filename "$source_url")
  image_name="${filename%.vhd}"

  # --permissions: The permissions for the resource that the SAS URL points to.
  # Allowed values:
  #  (a)dd
  #  (c)reate
  #  (d)elete
  #  (e)xecute
  #  (f)ilter_by_tags
  #  (i)set_immutability_policy
  #  (l)ist
  #  (m)ove
  #  (r)ead
  #  (t)ag
  #  (w)rite
  #  (x)delete_previous_version
  #  (y)permanent_delete.

  # If copying lasts more than one day, we have a problem.
  sas_expiry=$(generate_expiry_days "1")
  sas_token=$(az storage container generate-sas \
    --account-name "${storage_account}" \
    --expiry "$sas_expiry" \
    --name "$container" \
    --only-show-errors \
    --output tsv \
    --permissions acw)

  destination_url="https://${storage_account}.blob.core.windows.net/${container}"
  sas_destination_url="${destination_url}?${sas_token}"

  # Copy the image from cPacket subscription to the destination subscription
  # TODO: use native 'az copy' facility when it becomes available
  azcopy copy --check-length=false --recursive "$source_url" "$sas_destination_url"

  # Create the Azure image for the cCloud appliance if it doesn't exist
  # Unlike the VHD images, these are used for creating VMs
  existing_image=$(az image show \
    -g "${resource_group}" \
    -n "$image_name" \
    --query "name" \
    -o tsv 2>/dev/null || true)

  if [ -z "$existing_image" ]; then
    echo "Creating image ${image_name}..."
    image_source="${destination_url}/${filename}"
    az image create \
      -g "${resource_group}" \
      -n "$image_name" \
      --location "$location" \
      --os-type Linux \
      --source "$image_source" \
      --tags "createdby=${created_by}"
  else
    echo "Image ${image_name} already exists in this resource group. Skipping..."
  fi
}

generate_expiry_days() {
  local duration="$1"
  local datetime
  if command -v gdate >/dev/null 2>&1; then
    # Use gdate if available (macOS with GNU coreutils installed)
    datetime=$(gdate -u -d "+${duration} day" +"%Y-%m-%dT%H:%M:%SZ")
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    # MacOS default date utility
    datetime=$(date -u -j -v "+${duration}d" +"%Y-%m-%dT%H:%M:%SZ")
  elif command -v date >/dev/null 2>&1; then
    # Use date if available (Linux)
    datetime=$(date -u -d "+${duration} day" +"%Y-%m-%dT%H:%M:%SZ")
  else
    # Date utility not found
    echo "Date utility not found or date format is not what we expect. Please install GNU coreutils."
    exit 1
  fi
  echo "$datetime"
}

get_filename() {
  local uri="$1"
  # Remove the URI query parameters.
  # If the URI is 'https://something.blob.core.windows.net/container/filename?key1=value1&key2=value2',
  # ... retrieve 'https://something.blob.core.windows.net/container/filename.vhd'
  uri="${uri%\?*}"

  # Greedily remove everything up to, and including, the last '/'.
  # If the URI is 'https://something.blob.core.windows.net/container/filename.vhd',
  # ... retrieve 'filename.vhd'.
  filename="${uri##*/}"

  echo "$filename"
}

create_random_id() {
  echo "$RANDOM" | base64 | head -c 6 | tr '[:upper:]' '[:lower:]'
}

azure_get_user() {
  # whoami
  az ad signed-in-user show --query 'userPrincipalName' -o tsv
}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        ccloud_azure_images_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  if command -v az >/dev/null 2>&1; then
    deps['az']="$(command -v az | head -n1)"
  else
    printf "missing dependency: az\n" >&2
    exit 1
  fi

  if command -v azcopy >/dev/null 2>&1; then
    deps['azcopy']="$(command -v azcopy | head -n1)"
  else
    printf "missing dependency: azcopy\n" >&2
    exit 1
  fi

  action="root"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --file | -f)

        if [[ -n ${2+x} ]]; then

          args['--file']="$2"
          shift
          shift
        else
          printf "%s\n" "--file requires an argument: --file, -f FILE" >&2
          exit 1
        fi
        ;;

      --storage-account | -a)

        if [[ -n ${2+x} ]]; then

          args['--storage-account']="$2"
          shift
          shift
        else
          printf "%s\n" "--storage-account requires an argument: --storage-account, -a STORAGE-ACCOUNT" >&2
          exit 1
        fi
        ;;

      --container | -c)

        if [[ -n ${2+x} ]]; then

          args['--container']="$2"
          shift
          shift
        else
          printf "%s\n" "--container requires an argument: --container, -c CONTAINER" >&2
          exit 1
        fi
        ;;

      --resource-group | -g)

        if [[ -n ${2+x} ]]; then

          args['--resource-group']="$2"
          shift
          shift
        else
          printf "%s\n" "--resource-group requires an argument: --resource-group, -g RESOURCE-GROUP" >&2
          exit 1
        fi
        ;;

      --location | -l)

        if [[ -n ${2+x} ]]; then

          args['--location']="$2"
          shift
          shift
        else
          printf "%s\n" "--location requires an argument: --location, -l LOCATION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  if [[ -z ${args['--resource-group']+x} ]]; then
    printf "missing required flag: --resource-group, -g RESOURCE-GROUP\n" >&2
    exit 1
  fi

  [[ -n ${args['--file']:-} ]] || args['--file']="ccloud-urls.txt"

}

initialize() {
  version="1.4.38"
  long_usage=''
  set -e

  # shellcheck disable=SC2034
  # CONFIG_FILE="ccloud-azure-create-image.ini"

  if [[ -n "$CCLOUD_DEBUG" ]]; then set -x; fi
  if [[ "${TRACE-0}" == "1" ]]; then set -o xtrace; fi

}

run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
