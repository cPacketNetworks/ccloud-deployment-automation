{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.21.1.54444",
      "templateHash": "16022375306535129800"
    }
  },
  "parameters": {
    "cpacketPassword": {
      "type": "securestring"
    },
    "location": {
      "type": "string"
    },
    "deploymentId": {
      "type": "string"
    },
    "adminUser": {
      "type": "string"
    },
    "sshPublicKey": {
      "type": "string"
    },
    "virtualNetwork": {
      "type": "object"
    },
    "cclearvName": {
      "type": "string",
      "defaultValue": "cClear-V"
    },
    "cclearvVmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v5"
    },
    "cclearvVmImageId": {
      "type": "string"
    },
    "lbName": {
      "type": "string"
    },
    "vmssName": {
      "type": "string"
    },
    "vmssVmSize": {
      "type": "string"
    },
    "cvuvVmImageId": {
      "type": "string"
    },
    "vmssMin": {
      "type": "int"
    },
    "vmssMax": {
      "type": "int"
    },
    "downstreamTools": {
      "type": "string"
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "monitoringSubnetId": "[if(equals(parameters('virtualNetwork').newOrExisting, 'new'), resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monitoringSubnet.name), resourceId(parameters('virtualNetwork').resourceGroup, 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monitoringSubnet.name))]",
    "lbBePoolName": "[format('{0}-backend', parameters('lbName'))]",
    "lbPoolId": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('lbName'), variables('lbBePoolName'))]",
    "lbProbeName": "[format('{0}-probe', parameters('lbName'))]",
    "lbProbeId": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('lbName'), variables('lbProbeName'))]",
    "vmssInstRepairGracePeriod": "PT10M",
    "autoscaleUpThreshhold": 10000000,
    "autoscaleUpTimeGrain": "PT1M",
    "autoscaleUpTimeWindow": "PT5M",
    "autoscaleUpCooldown": "PT1M",
    "autoscaleDownThreshhold": 2500000,
    "autoscaleDownTimeGrain": "PT1M",
    "autoscaleDownTimeWindow": "PT5M",
    "autoscaleDownCooldown": "PT1M",
    "linuxConfiguration": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUser'))]",
            "keyData": "[parameters('sshPublicKey')]"
          }
        ]
      }
    },
    "cvuv_cloud_init_template": "#!/bin/bash\nset -ex\n\necho \"set -o vi\" >>/home/ubuntu/.bashrc\necho \"set -o vi\" >>/root/.bashrc\n\nbootconfig_file=\"/home/cpacket/boot_config.toml\"\n\n# Comma-separated list of IPV4 addresses\ndownstream_tools=\"DOWNSTREAM_CAPTURE_IPS\"\n\n# Convert the comma-separated list into an array\nIFS=',' read -r -a downstream_tool_addresses <<<\"$(echo \"$downstream_tools\" | tr -d '[:space:]')\"\n\ncapture_nic=\"eth0\"\ncapture_nic_ip=$(ip a show dev \"$capture_nic\" | awk -F'[ /]' '/inet /{print $6}')\n\ntouch \"$bootconfig_file\"\nchmod a+w \"$bootconfig_file\"\n\ncat >\"$bootconfig_file\" <<BOOTCFG_HEADER\nvm_type = \"azure\"\ncvuv_mode = \"inline\"\ncvuv_mirror_eth_0 = \"$capture_nic\"\nBOOTCFG_HEADER\n\nfor tools_index in \"${!downstream_tool_addresses[@]}\"; do\n  name_index=$((tools_index))\n  leet_index=$((tools_index + 1337))\n  cat >>\"$bootconfig_file\" <<ADDITIONAL_TOOLS\ncvuv_vxlan_id_${name_index} = ${leet_index}\ncvuv_vxlan_srcip_${name_index} = \"$capture_nic_ip\"\ncvuv_vxlan_remoteip_${name_index} = \"${downstream_tool_addresses[$tools_index]}\"\nADDITIONAL_TOOLS\ndone\n\n# cat >>\"$bootconfig_file\" <<FOOTER\n# FOOTER\n\necho \"boot configuration: completed\"\n",
    "cvuv_cloud_init": "[replace(variables('cvuv_cloud_init_template'), 'DOWNSTREAM_CAPTURE_IPS', parameters('downstreamTools'))]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[parameters('virtualNetwork').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": "[parameters('virtualNetwork').addressPrefixes]"
        }
      },
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/virtualNetworks'), parameters('tags')['Microsoft.Network/virtualNetworks'], null())]"
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monitoringSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.monitoringSubnet.addressPrefix]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'managementSecurityGroup')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', 'managementSecurityGroup')]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "condition": "[equals(parameters('virtualNetwork').newOrExisting, 'new')]",
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2020-11-01",
      "name": "[format('{0}/{1}', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.functionsSubnet.name)]",
      "properties": {
        "addressPrefix": "[parameters('virtualNetwork').subnets.functionsSubnet.addressPrefix]",
        "delegations": [
          {
            "name": "Microsoft.Web.serverFarms",
            "properties": {
              "serviceName": "Microsoft.Web/serverFarms"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
          }
        ],
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2021-05-01",
      "name": "[parameters('lbName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/loadBalancers'), parameters('tags')['Microsoft.Network/loadBalancers'], null())]",
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('lbBePoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[format('{0}-frontend', parameters('lbName'))]",
            "properties": {
              "subnet": {
                "id": "[variables('monitoringSubnetId')]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[format('{0}-to-vmss', parameters('lbName'))]",
            "properties": {
              "frontendPort": 0,
              "backendPort": 0,
              "protocol": "All",
              "enableTcpReset": true,
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', parameters('lbName'), format('{0}-frontend', parameters('lbName')))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('lbName'), variables('lbBePoolName'))]"
              },
              "probe": {
                "id": "[variables('lbProbeId')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('lbProbeName')]",
            "properties": {
              "protocol": "Https",
              "port": 443,
              "requestPath": "/",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monitoringSubnet.name)]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[parameters('cclearvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "management-ipcfg",
            "properties": {
              "subnet": {
                "id": "[variables('monitoringSubnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ],
        "enableAcceleratedNetworking": true
      },
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Network/networkInterfaces'), parameters('tags')['Microsoft.Network/networkInterfaces'], null())]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monitoringSubnet.name)]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[parameters('cclearvName')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('cclearvVmSize')]"
        },
        "storageProfile": {
          "imageReference": {
            "id": "[parameters('cclearvVmImageId')]"
          },
          "osDisk": {
            "osType": "Linux",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "deleteOption": "Delete"
          },
          "dataDisks": [
            {
              "name": "[format('{0}-DataDisk1', parameters('cclearvName'))]",
              "lun": 1,
              "createOption": "Empty",
              "diskSizeGB": 500,
              "caching": "ReadWrite",
              "deleteOption": "Delete"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('cclearvName'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[parameters('cclearvName')]",
          "adminUsername": "[parameters('adminUser')]",
          "adminPassword": "[parameters('sshPublicKey')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        }
      },
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachines'), union(parameters('tags')['Microsoft.Compute/virtualMachines'], createObject('cpacket:ApplianceType', 'cclearv')), createObject('cpacket:ApplianceType', 'cclearv'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('cclearvName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2022-11-01",
      "name": "[parameters('vmssName')]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachineScaleSets'), parameters('tags')['Microsoft.Compute/virtualMachineScaleSets'], null())]",
      "sku": {
        "name": "[parameters('vmssVmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('vmssMin')]"
      },
      "properties": {
        "orchestrationMode": "Uniform",
        "overprovision": false,
        "automaticRepairsPolicy": {
          "enabled": true,
          "gracePeriod": "[variables('vmssInstRepairGracePeriod')]"
        },
        "scaleInPolicy": {
          "rules": [
            "Default"
          ]
        },
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "[format('{0}-cvuv-', parameters('deploymentId'))]",
            "adminUsername": "[parameters('adminUser')]",
            "adminPassword": "[parameters('sshPublicKey')]",
            "linuxConfiguration": "[variables('linuxConfiguration')]"
          },
          "storageProfile": {
            "imageReference": {
              "id": "[parameters('cvuvVmImageId')]"
            },
            "osDisk": {
              "createOption": "FromImage",
              "osType": "Linux"
            }
          },
          "networkProfile": {
            "healthProbe": {
              "id": "[variables('lbProbeId')]"
            },
            "networkInterfaceConfigurations": [
              {
                "name": "[format('{0}-cvuv-cap-nic', parameters('deploymentId'))]",
                "properties": {
                  "primary": true,
                  "enableAcceleratedNetworking": true,
                  "enableIPForwarding": true,
                  "ipConfigurations": [
                    {
                      "name": "[format('{0}-cap-ipcfg', parameters('deploymentId'))]",
                      "properties": {
                        "subnet": {
                          "id": "[variables('monitoringSubnetId')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[variables('lbPoolId')]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', parameters('lbName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetwork').name, parameters('virtualNetwork').subnets.monitoringSubnet.name)]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetwork').name)]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[format('{0}-autoscale', parameters('deploymentId'))]",
      "location": "[parameters('location')]",
      "tags": "[if(contains(parameters('tags'), 'Microsoft.Compute/virtualMachineScaleSets'), parameters('tags')['Microsoft.Compute/virtualMachineScaleSets'], null())]",
      "properties": {
        "name": "[format('{0}-autoscale', parameters('deploymentId'))]",
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssName'))]",
        "enabled": true,
        "profiles": [
          {
            "name": "[format('{0}-net-scale-prof', parameters('deploymentId'))]",
            "capacity": {
              "minimum": "[string(parameters('vmssMin'))]",
              "maximum": "[string(parameters('vmssMax'))]",
              "default": "[string(parameters('vmssMin'))]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Network in Total",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssName'))]",
                  "timeGrain": "[variables('autoscaleUpTimeGrain')]",
                  "statistic": "Average",
                  "timeWindow": "[variables('autoscaleUpTimeWindow')]",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": "[variables('autoscaleUpThreshhold')]"
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "[variables('autoscaleUpCooldown')]"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Network in Total",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssName'))]",
                  "timeGrain": "[variables('autoscaleDownTimeGrain')]",
                  "statistic": "Average",
                  "timeWindow": "[variables('autoscaleDownTimeWindow')]",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": "[variables('autoscaleDownThreshhold')]"
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "[variables('autoscaleDownCooldown')]"
                }
              }
            ]
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-02-01",
      "name": "managementSecurityGroup",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-ssh",
            "properties": {
              "priority": 100,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22"
            }
          },
          {
            "name": "allow-https",
            "properties": {
              "priority": 110,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-09-01",
      "name": "cpacketappliances",
      "kind": "elastic",
      "location": "[parameters('location')]",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": true,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      },
      "sku": {
        "name": "EP1",
        "tier": "ElasticPremium",
        "size": "EP1",
        "family": "EP",
        "capacity": 1
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-09-01",
      "name": "cpacketappliances",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "location": "[parameters('location')]",
      "tags": {},
      "properties": {
        "minimumTlsVersion": "TLS1_0",
        "allowBlobPublicAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "cpacketappliances",
      "location": "[parameters('location')]",
      "tags": {},
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest",
        "RetentionInDays": 90,
        "IngestionMode": "ApplicationInsights",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.EventGrid/systemTopics",
      "apiVersion": "2022-06-15",
      "name": "vmss-events",
      "properties": {
        "source": "[resourceGroup().id]",
        "topicType": "Microsoft.Resources.ResourceGroups"
      },
      "identity": {
        "type": "None"
      },
      "location": "global",
      "tags": {}
    }
  ]
}